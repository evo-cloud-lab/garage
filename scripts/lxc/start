#!/bin/bash
set -x
SCRIPTBASE=$(readlink -nf $(dirname $0))

ID=$1
NAME="${CLUSTER_NAME}-$ID"
BASE="$CLUSTER_BASE/nodes/$ID"
ID_HEX=$(printf '%02x' $ID)

STATUS=$(lxc-info -n $NAME 2>/dev/null | grep 'state:' | sed -r 's/^state:[[:space:]]*([^[:space:]]+).*$/\1/')
test "$STATUS" == "RUNNING" && exit 0

set -e

shift
for opt in $@ ; do
    case "$opt" in
        clean)
            rm -fr $BASE/over || true
            ;;
    esac
done

for dir in root over os base ; do
    mkdir -p $BASE/$dir
done

echo >$BASE/config

for nic in 0 1 2 3 4 5 6 7 ; do
    env_name=NIC$nic
    link_name=${!env_name}
    if [ -n "$link_name" ]; then
        cat >>$BASE/config <<EOF
lxc.network.type=veth
lxc.network.link=$link_name
lxc.network.flags=up
lxc.network.hwaddr = 00:16:3e:75:$ID_HEX:0$nic
EOF
    fi
done

cat >>$BASE/config <<EOF
lxc.utsname = $NAME

lxc.devttydir =
lxc.tty = 4
lxc.pts = 1024
lxc.arch = amd64
lxc.cap.drop = sys_module mac_admin
#lxc.pivotdir = /mnt/root

# uncomment the next line to run the container unconfined:
lxc.aa_profile = unconfined

lxc.cgroup.devices.deny = a
# Allow any mknod (but not using the node)
lxc.cgroup.devices.allow = c *:* m
lxc.cgroup.devices.allow = b *:* m
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm
#fuse
lxc.cgroup.devices.allow = c 10:229 rwm
#tun
lxc.cgroup.devices.allow = c 10:200 rwm
#full
lxc.cgroup.devices.allow = c 1:7 rwm
#hpet
lxc.cgroup.devices.allow = c 10:228 rwm
#kvm
lxc.cgroup.devices.allow = c 10:232 rwm

EOF

if [ -f "$LXC_CONFIG" ]; then
    cat "$LXC_CONFIG" >>$BASE/config
fi

LOWER=base
mountpoint $BASE/base || mount -t squashfs $ROOTFS $BASE/base -o ro

if [ -n "$PROGDIR" ]; then
    LOWER=os
    mountpoint $BASE/os || mount -t overlayfs -o ro,upperdir=$PROGDIR,lowerdir=$BASE/base overlay $BASE/os
fi

mountpoint $BASE/root || mount -t overlayfs -o rw,upperdir=$BASE/over,lowerdir=$BASE/$LOWER overlay $BASE/root

lxc-start -n $NAME -f $BASE/config -s lxc.rootfs=$BASE/root -d

# lxc-wait doesn't support timeout, can't be used here
TRIES=0
while [ $TRIES -lt 600 ]; do
    STATUS=$(lxc-info -n $NAME 2>/dev/null | grep 'state:' | sed -r 's/^state:[[:space:]]*([^[:space:]]+).*$/\1/')
    test "$STATUS" == "RUNNING" && exit 0
    TRIES=$(($TRIES+1))
    sleep 0.1
done

echo 'TIMEOUT' 1>&2
$SCRIPTBASE/stop $ID
exit 1
